import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, CallbackQuery
from dotenv import load_dotenv
from services.service_manager import ServiceManager
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
service_manager = ServiceManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ\n"
        "/create_user –∏–º—è - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è OpenVPN\n"
        "/get_all_users - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö .ovpn —Ñ–∞–π–ª—ã\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@dp.message(Command("info"))
async def cmd_info(message: Message):
    system_service = service_manager.get_system_service()
    server_info = system_service.format_system_info()
    await message.answer(server_info, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_user
@dp.message(Command("create_user"))
async def cmd_create_user(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
            "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_user –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/create_user john_doe`",
            parse_mode="Markdown"
        )
        return
    
    username = command_parts[1].strip()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = service_manager.get_user_service()
        success, message_text = user_service.create_user(username)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            await status_msg.edit_text(
                f"‚úÖ **{message_text}**\n\n"
                f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n"
                f"üìÅ **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** `{username}.ovpn`\n\n"
                f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...",
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            file_success, file_path, file_error = user_service.get_user_file(username)
            
            if file_success:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    file_to_send = FSInputFile(file_path, filename=f"{username}.ovpn")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    await message.answer_document(
                        document=file_to_send,
                        caption=f"üìÅ **{username}** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN\n\n"
                               f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await status_msg.edit_text(
                        f"‚úÖ **{message_text}**\n\n"
                        f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n"
                        f"üìÅ **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** `{username}.ovpn`\n\n"
                        f"üì§ **–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ!**",
                        parse_mode="Markdown"
                    )
                    
                except Exception as e:
                    await status_msg.edit_text(
                        f"‚úÖ **{message_text}**\n\n"
                        f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n"
                        f"üìÅ **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** `{username}.ovpn`\n\n"
                        f"‚ö†Ô∏è **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:** `{str(e)}`",
                        parse_mode="Markdown"
                    )
            else:
                await status_msg.edit_text(
                    f"‚úÖ **{message_text}**\n\n"
                    f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n"
                    f"üìÅ **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** `{username}.ovpn`\n\n"
                    f"‚ö†Ô∏è **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** `{file_error}`",
                    parse_mode="Markdown"
                )
        else:
            await status_msg.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
                f"**–î–µ—Ç–∞–ª–∏:** `{message_text}`",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_all_users
@dp.message(Command("get_all_users"))
async def cmd_get_all_users(message: Message):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_service = service_manager.get_user_service()
        success, users, error_message = user_service.get_all_users()
        
        if not success:
            await message.answer(f"‚ùå **–û—à–∏–±–∫–∞:** {error_message}")
            return
        
        if not users:
            await message.answer("üìÅ **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç**\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö .ovpn —Ñ–∞–π–ª–æ–≤.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(message, users, 0)
                
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_users_page(message: Message, users: list, page: int = 0, edit_message: bool = False):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        file_service = service_manager.get_file_service()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = file_service.create_files_list_text(users, page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = file_service.create_pagination_keyboard(users, page)
        
        if edit_message:
            await message.edit_text(users_list, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(users_list, parse_mode="Markdown", reply_markup=keyboard)
                
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('download_'))
async def process_download_callback(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        username = callback_query.data.replace('download_', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = service_manager.get_user_service()
        success, file_path, error_message = user_service.get_user_file(username)
        
        if not success:
            await callback_query.answer(f"‚ùå {error_message}", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        file_to_send = FSInputFile(file_path, filename=f"{username}.ovpn")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback_query.message.answer_document(
            document=file_to_send,
            caption=f"üìÅ **{username}** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer(f"‚úÖ –§–∞–π–ª {username}.ovpn –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith('page_'))
async def process_page_callback(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page_data = callback_query.data.replace('page_', '')
        
        if page_data == "info":
            await callback_query.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=False)
            return
        
        page = int(page_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_service = service_manager.get_user_service()
        success, users, error_message = user_service.get_all_users()
        
        if not success:
            await callback_query.answer(f"‚ùå {error_message}", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback_query.message, users, page, edit_message=True)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: Message):
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
