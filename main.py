import asyncio
import logging
import subprocess
import os
import glob
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
HOST = os.getenv('HOST', '–ù–µ —É–∫–∞–∑–∞–Ω')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ\n"
        "/create_user –∏–º—è - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è OpenVPN\n"
        "/get_all_users - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö .ovpn —Ñ–∞–π–ª—ã\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@dp.message(Command("info"))
async def cmd_info(message: Message):
    import platform
    import datetime
    
    server_info = (
        "üñ•Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:**\n\n"
        f"üåê **–•–æ—Å—Ç:** `{HOST}`\n"
        f"üñ•Ô∏è **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform.system()} {platform.release()}\n"
        f"üêç **Python:** {platform.python_version()}\n"
        f"‚è∞ **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    )
    
    await message.answer(server_info, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_user
@dp.message(Command("create_user"))
async def cmd_create_user(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
            "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_user –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/create_user john_doe`",
            parse_mode="Markdown"
        )
        return
    
    username = command_parts[1].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if not username.replace('_', '').replace('-', '').isalnum():
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞:** –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!"
        )
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∫—Ä–∏–ø—Ç-–æ–±–µ—Ä—Ç–∫—É
        cmd = f'bash add_user.sh {username}'
        
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            cwd='/app'  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        )
        
        if result.returncode == 0:
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await status_msg.edit_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n"
                f"üìÅ **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** `{username}.ovpn`\n\n"
                f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
                parse_mode="Markdown"
            )
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await status_msg.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
                f"**–î–µ—Ç–∞–ª–∏:** `{error_msg}`",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_all_users
@dp.message(Command("get_all_users"))
async def cmd_get_all_users(message: Message):
    try:
        # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å .ovpn —Ñ–∞–π–ª–∞–º–∏
        ovpn_dir = "/root/ovpns"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(ovpn_dir):
            await message.answer("‚ùå **–û—à–∏–±–∫–∞:** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å .ovpn —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .ovpn —Ñ–∞–π–ª–æ–≤
        ovpn_files = glob.glob(os.path.join(ovpn_dir, "*.ovpn"))
        
        if not ovpn_files:
            await message.answer("üìÅ **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç**\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö .ovpn —Ñ–∞–π–ª–æ–≤.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
        ovpn_files.sort()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(message, ovpn_files, 0)
                
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_users_page(message: Message, ovpn_files: list, page: int = 0, edit_message: bool = False):
    try:
        files_per_page = 10
        total_files = len(ovpn_files)
        total_pages = (total_files + files_per_page - 1) // files_per_page
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * files_per_page
        end_idx = min(start_idx + files_per_page, total_files)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_files = ovpn_files[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        users_list = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π OpenVPN** (—Å—Ç—Ä. {page + 1}/{total_pages}):\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard_buttons = []
        
        for i, file_path in enumerate(page_files, start_idx + 1):
            filename = os.path.basename(file_path)
            username = filename.replace('.ovpn', '')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            size_kb = file_size / 1024  # –†–∞–∑–º–µ—Ä –≤ KB
            
            users_list += f"{i}. **{username}** ({size_kb:.1f} KB)\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {username}",
                    callback_data=f"download_{username}"
                )
            ])
        
        users_list += f"\nüìä **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_files}\n"
        users_list += "üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:**"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        
        if total_pages > 1:
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_row = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if page > 0:
                nav_row.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"page_{page - 1}"
                ))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            nav_row.append(InlineKeyboardButton(
                text=f"{page + 1}/{total_pages}",
                callback_data="page_info"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            if page < total_pages - 1:
                nav_row.append(InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"page_{page + 1}"
                ))
            
            navigation_buttons.append(nav_row)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        all_buttons = keyboard_buttons + navigation_buttons
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=all_buttons)
        
        if edit_message:
            await message.edit_text(users_list, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(users_list, parse_mode="Markdown", reply_markup=keyboard)
                
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:**\n\n`{str(e)}`",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('download_'))
async def process_download_callback(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        username = callback_query.data.replace('download_', '')
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = f"/root/ovpns/{username}.ovpn"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await callback_query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        file_to_send = FSInputFile(file_path, filename=f"{username}.ovpn")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback_query.message.answer_document(
            document=file_to_send,
            caption=f"üìÅ **{username}** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer(f"‚úÖ –§–∞–π–ª {username}.ovpn –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith('page_'))
async def process_page_callback(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page_data = callback_query.data.replace('page_', '')
        
        if page_data == "info":
            await callback_query.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=False)
            return
        
        page = int(page_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .ovpn —Ñ–∞–π–ª–æ–≤
        ovpn_dir = "/root/ovpns"
        ovpn_files = glob.glob(os.path.join(ovpn_dir, "*.ovpn"))
        ovpn_files.sort()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback_query.message, ovpn_files, page, edit_message=True)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: Message):
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
