import os
from typing import List, Set
from functools import wraps
from aiogram.types import Message, CallbackQuery


class AuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.allowed_users = self._load_allowed_users()
    
    def _load_allowed_users(self) -> Set[int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Returns:
            Set[int]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        allowed_users_str = os.getenv('ALLOWED_USERS', '')
        
        if not allowed_users_str:
            return set()
        
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            user_ids = [int(uid.strip()) for uid in allowed_users_str.split(',') if uid.strip()]
            return set(user_ids)
        except ValueError:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
            return set()
    
    def is_user_allowed(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if not self.allowed_users:
            return True
        
        return user_id in self.allowed_users
    
    def get_unauthorized_message(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        return (
            "üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )


def require_auth(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(message_or_callback, Message):
            user_id = message_or_callback.from_user.id
            send_func = message_or_callback.answer
        elif isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
            send_func = message_or_callback.message.answer
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await func(message_or_callback, *args, **kwargs)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_service = AuthService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not auth_service.is_user_allowed(user_id):
            await send_func(auth_service.get_unauthorized_message(), parse_mode="Markdown")
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return await func(message_or_callback, *args, **kwargs)
    
    return wrapper


def public_command(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
    
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–∞–Ω–¥–∞–º start, help –∏ –¥—Ä—É–≥–∏–º –ø—É–±–ª–∏—á–Ω—ã–º
    """
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        return await func(message_or_callback, *args, **kwargs)
    
    return wrapper
